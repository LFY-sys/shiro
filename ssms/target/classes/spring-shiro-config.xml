<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- 配置shiro的核心securityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"/>
		<!--<property name="sessionMode" value="native"/>-->
	<!--	<property name="realm" ref="jdbcRealm"/>-->
	<!--	<property name="realm" ref="encrRealm"/>-->
	<!--	<property name="realm" ref="saltRealm"/>-->
		<property name="authenticator" ref="authenticator"></property>
		<!-- 配置多Realm -->
	<!--	<property name="realms">
				<list>
					<ref bean="md5Realm"/>
					<ref bean="sha1Realm"/>
				</list>
		   </property>-->
		<property name="realm" ref="authRealm"/>

		<!-- 配置记住我的时长 -->
		<property name="rememberMeManager.cookie.maxAge" value="60"></property>
	</bean>

	<!-- 配置多Realm认证策略 -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<!-- 所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。-->
			<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
			<!-- 只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息，该策略为默认策略 -->
			<!--<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>-->
			<!-- 只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略 -->
			<!--<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>-->
		</property>
	</bean>

	<!-- 配置shiro的重要的元素Reaml(验证的数据源)，可自定义 -->
	<bean id="jdbcRealm" class="com.wsd.shiro.JdbcRealm">
	</bean>

	<!-- 配置加密Realm -->
	<bean id="encrRealm" class="com.wsd.shiro.EncrRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 指定加密方式MD5，SHA1等 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 指定加密次数 -->
				<property name="hashIterations" value="10"></property>
			</bean>
		</property>
	</bean>

	<!-- 配置加盐加密Realm -->
	<bean id="saltRealm" class="com.wsd.shiro.SaltRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 指定加密方式MD5，SHA1等 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 指定加密次数 -->
				<property name="hashIterations" value="10"></property>
			</bean>
		</property>
	</bean>

	<!-- 配置多Realm加密Realm -->
	<bean id="md5Realm" class="com.wsd.shiro.Md5Realm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 指定加密方式MD5，SHA1等 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 指定加密次数 -->
				<property name="hashIterations" value="10"></property>
			</bean>
		</property>
	</bean>

	<!-- 配置多Realm加密Realm -->
	<bean id="sha1Realm" class="com.wsd.shiro.Sha1Realm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 指定加密方式MD5，SHA1等 -->
				<property name="hashAlgorithmName" value="SHA1"></property>
				<!-- 指定加密次数 -->
				<property name="hashIterations" value="10"></property>
			</bean>
		</property>
	</bean>

	<!-- 配置认证授权Realm -->
	<bean id="authRealm" class="com.wsd.shiro.AuthRealm">
	</bean>

	<!-- 配置ehcache缓存 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>

	<!-- 配置shiro中bean生命周期管理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- AOP式方法级权限检查 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

<!-- shiro过滤器配置，与web.xml中shiro过滤器同名 -->
<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	<property name="securityManager" ref="securityManager"/>
	<!-- 需要登录成功后跳转的页面 -->
	<property name="loginUrl" value="login.jsp"/>
	<!-- 登录成功后跳转的页面 -->
	<property name="successUrl" value="welcom.jsp"/>
	<!-- 访问未授权页面跳转的页面 -->
	<property name="unauthorizedUrl" value="unauthor.jsp"/>

<!--&lt;!&ndash;		<property name="filterChainDefinitions">-->
		<!--&lt;!&ndash; 静态资源需要设置为anon，否则找不到 &ndash;&gt;-->
		<!--<value>-->
			<!--&lt;!&ndash; 静态资源所有都能访问 &ndash;&gt;-->
			<!--/statics/** = anon-->
			<!--&lt;!&ndash; 登录页面所有都能访问 &ndash;&gt;-->
			<!--/login.jsp = anon-->
			<!--&lt;!&ndash; 登录成功界面需要通过登录认证或记住我访问 &ndash;&gt;-->
			<!--/welcom.jsp = user-->
			<!--&lt;!&ndash; 退出登录 &ndash;&gt;-->
			<!--/logout = logout-->
			<!--&lt;!&ndash; 拥有user角色可以访问 &ndash;&gt;-->
			<!--/user.jsp = roles[user]-->
			<!--&lt;!&ndash; 拥有admin角色可以访问 &ndash;&gt;-->
			<!--/admin.jsp = roles[admin]-->
		<!--</value>-->
	<!--</property>&ndash;&gt;-->

	<!-- 初始化filterChainDefinitionMap -->
	<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>

</bean>

<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
<!-- 需要自定义FilterChainDefinitionMapBuilder类，并构造buildFilterChainDefinitionMap方法 -->
<bean id="filterChainDefinitionMapBuilder" class="com.wsd.base.FilterChainDefinitionMapBuilder"></bean>
</beans>
